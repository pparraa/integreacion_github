{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scan/51f9aa35-ce61-4f95-95b0-be0c79f36c44"
    },
    "help": {
      "href": "https://help.veracode.com/reader/LMv_dtSHyb7iIxAQznC~9w/56JX_MvP4edL8JB_h8ywGA"
    }
  },
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 285992 bytes",
  "results": {
    "TestResults": {
      "Issues": {
        "Issue": [
          {
            "Title": "java.lang.Runtime.exec",
            "IssueId": "1112",
            "GOB": "B",
            "Severity": "5",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
            "CWEId": "78",
            "VCId": "78.003",
            "DisplayText": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/OS-Commanding\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ToolsController.java",
                "Line": "56",
                "FunctionName": "ping",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ToolsController.ping",
                "FunctionPrototype": "java.lang.String ping(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.ToolsController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3149804519",
              "PrototypeHash": "2923252499",
              "FlawHash": "3051621651",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "221330682",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.lang.Runtime.exec",
            "IssueId": "1113",
            "GOB": "B",
            "Severity": "5",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
            "CWEId": "78",
            "VCId": "78.003",
            "DisplayText": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/OS-Commanding\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ToolsController.java",
                "Line": "59",
                "FunctionName": "ping",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ToolsController.ping",
                "FunctionPrototype": "java.lang.String ping(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.ToolsController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3149804519",
              "PrototypeHash": "2923252499",
              "FlawHash": "1314945025",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3320331067",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.lang.Runtime.exec",
            "IssueId": "1114",
            "GOB": "B",
            "Severity": "5",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
            "CWEId": "78",
            "VCId": "78.003",
            "DisplayText": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/OS-Commanding\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ToolsController.java",
                "Line": "88",
                "FunctionName": "fortune",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ToolsController.fortune",
                "FunctionPrototype": "java.lang.String fortune(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.ToolsController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2161030689",
              "PrototypeHash": "3827778930",
              "FlawHash": "3753823106",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "4165693487",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.lang.Runtime.exec",
            "IssueId": "1111",
            "GOB": "B",
            "Severity": "5",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
            "CWEId": "78",
            "VCId": "78.003",
            "DisplayText": "\u003cspan\u003eThis call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variable cmd. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Command_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/OS-Commanding\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ToolsController.java",
                "Line": "91",
                "FunctionName": "fortune",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ToolsController.fortune",
                "FunctionPrototype": "java.lang.String fortune(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.ToolsController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2161030689",
              "PrototypeHash": "3827778930",
              "FlawHash": "3707028537",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2620704574",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1016",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "166",
                "FunctionName": "processLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processLogin",
                "FunctionPrototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2948498106",
              "PrototypeHash": "839857025",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1018",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "251",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1017",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "316",
                "FunctionName": "processRegister",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegister",
                "FunctionPrototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2405517373",
              "PrototypeHash": "2646652268",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.execute",
            "IssueId": "1011",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "384",
                "FunctionName": "processRegisterFinish",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegisterFinish",
                "FunctionPrototype": "java.lang.String processRegisterFinish(java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2611186185",
              "PrototypeHash": "992078440",
              "FlawHash": "3765405848",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1019",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "495",
                "FunctionName": "showProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showProfile",
                "FunctionPrototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2441819690",
              "PrototypeHash": "931230983",
              "FlawHash": "3392777041",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "2",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.PreparedStatement.executeQuery",
            "IssueId": "1028",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the myInfo object, which contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "506",
                "FunctionName": "showProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showProfile",
                "FunctionPrototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2441819690",
              "PrototypeHash": "931230983",
              "FlawHash": "1480817290",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "3",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.PreparedStatement.executeQuery",
            "IssueId": "1027",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the blabberQuery object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "490",
                "FunctionName": "showBlabbers",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.showBlabbers",
                "FunctionPrototype": "java.lang.String showBlabbers(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1426715244",
              "PrototypeHash": "364381741",
              "FlawHash": "1480817290",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1015",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "40",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.execute",
            "IssueId": "1010",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "47",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "239218340",
              "FlawHashCount": "6",
              "FlawHashOrdinal": "4",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.execute",
            "IssueId": "1012",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "51",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "239218340",
              "FlawHashCount": "6",
              "FlawHashOrdinal": "6",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1014",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/ListenCommand.java",
                "Line": "40",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.ListenCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.ListenCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1600354578",
              "PrototypeHash": "2344031398",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.execute",
            "IssueId": "1009",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/ListenCommand.java",
                "Line": "47",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.ListenCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.ListenCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1600354578",
              "PrototypeHash": "2344031398",
              "FlawHash": "239218340",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "4",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1013",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/IgnoreCommand.java",
                "Line": "40",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.IgnoreCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.IgnoreCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "592522510",
              "PrototypeHash": "154563142",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.execute",
            "IssueId": "1008",
            "GOB": "B",
            "Severity": "4",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
            "CWEId": "89",
            "VCId": "89.005",
            "DisplayText": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/SQL_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/SQL-Injection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/IgnoreCommand.java",
                "Line": "47",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.IgnoreCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.IgnoreCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "592522510",
              "PrototypeHash": "154563142",
              "FlawHash": "239218340",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "4",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.io.ObjectInput.readObject",
            "IssueId": "1109",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Deserialization of Untrusted Data",
            "CWEId": "502",
            "VCId": "502.002",
            "DisplayText": "\u003cspan\u003eThe serialized-object data stream used in the call to java.io.ObjectInput.readObject() appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types.  Paired with a weakness in another class\u0027s constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject() was called on the in object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.\u003c/span\u003e \u003cspan\u003eAvoid passing untrusted data to ObjectInputStream; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/502.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/utils/UserFactory.java",
                "Line": "44",
                "FunctionName": "createFromRequest",
                "QualifiedFunctionName": "com.veracode.verademo.utils.UserFactory.createFromRequest",
                "FunctionPrototype": "User createFromRequest(javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.utils.UserFactory"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1712511862",
              "PrototypeHash": "2826266596",
              "FlawHash": "3455680234",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.http.HttpServletResponse.addCookie",
            "IssueId": "1074",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of CRLF Sequences in HTTP Headers (\u0027HTTP Response Splitting\u0027)",
            "CWEId": "113",
            "VCId": "113.003",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to java.util.Base64$Encoder.encode.\u003c/span\u003e \u003cspan\u003eEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/113.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/HTTP_Response_Splitting\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/HTTP-Response-Splitting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/utils/UserFactory.java",
                "Line": "96",
                "FunctionName": "updateInResponse",
                "QualifiedFunctionName": "com.veracode.verademo.utils.UserFactory.updateInResponse",
                "FunctionPrototype": "javax.servlet.http.HttpServletResponse updateInResponse(User, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.utils.UserFactory"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3762992136",
              "PrototypeHash": "3816343651",
              "FlawHash": "3905295364",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3492435991",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.security.MessageDigest.getInstance",
            "IssueId": "1108",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "crypto",
            "IssueType": "Use of a Broken or Risky Cryptographic Algorithm",
            "CWEId": "327",
            "VCId": "327.001",
            "DisplayText": "\u003cspan\u003eThis function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/utils/User.java",
                "Line": "103",
                "FunctionName": "md5",
                "QualifiedFunctionName": "com.veracode.verademo.utils.User.md5",
                "FunctionPrototype": "java.lang.String md5(java.lang.String)",
                "Scope": "com.veracode.verademo.utils.User"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2017827845",
              "PrototypeHash": "3600292871",
              "FlawHash": "1900691328",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1787533810",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "JDBC_PASSWORD initializer",
            "IssueId": "1007",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "crypto",
            "IssueType": "Use of Hard-coded Password",
            "CWEId": "259",
            "VCId": "259.002",
            "DisplayText": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD initializer\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/utils/Constants.java",
                "Line": "1",
                "FunctionName": "UNKNOWN",
                "QualifiedFunctionName": "UNKNOWN",
                "FunctionPrototype": "UNKNOWN",
                "Scope": "UNKNOWN"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1052258512",
              "PrototypeHash": "0",
              "FlawHash": "2189615053",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "0",
              "CauseHashCount": "0",
              "CauseHashOrdinal": "0"
            }
          },
          {
            "Title": "hardcodepasswdset",
            "IssueId": "1106",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "crypto",
            "IssueType": "Use of Hard-coded Password",
            "CWEId": "259",
            "VCId": "259.002",
            "DisplayText": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodepasswdset\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/utils/Constants.java",
                "Line": "13",
                "FunctionName": "!ctor",
                "QualifiedFunctionName": "com.veracode.verademo.utils.Constants.!ctor",
                "FunctionPrototype": "void !ctor()",
                "Scope": "com.veracode.verademo.utils.Constants"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3844508335",
              "PrototypeHash": "4146034803",
              "FlawHash": "1879343762",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3691195164",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "showLogin",
            "IssueId": "1001",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
            "CWEId": "601",
            "VCId": "601.002",
            "DisplayText": "\u003cspan\u003eThis call to showLogin() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "82",
                "FunctionName": "showLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showLogin",
                "FunctionPrototype": "java.lang.String showLogin(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4166923562",
              "PrototypeHash": "869084474",
              "FlawHash": "1919273320",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "1738708127",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "showLogin",
            "IssueId": "1002",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
            "CWEId": "601",
            "VCId": "601.002",
            "DisplayText": "\u003cspan\u003eThis call to showLogin() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "95",
                "FunctionName": "showLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showLogin",
                "FunctionPrototype": "java.lang.String showLogin(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4166923562",
              "PrototypeHash": "869084474",
              "FlawHash": "1919273320",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "1738708127",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1085",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "114",
                "FunctionName": "showLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showLogin",
                "FunctionPrototype": "java.lang.String showLogin(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4166923562",
              "PrototypeHash": "869084474",
              "FlawHash": "2964781463",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "476343702",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.http.HttpServletResponse.addCookie",
            "IssueId": "1072",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of CRLF Sequences in HTTP Headers (\u0027HTTP Response Splitting\u0027)",
            "CWEId": "113",
            "VCId": "113.003",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/113.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/HTTP_Response_Splitting\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/HTTP-Response-Splitting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "173",
                "FunctionName": "processLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processLogin",
                "FunctionPrototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2948498106",
              "PrototypeHash": "839857025",
              "FlawHash": "873983214",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2017281430",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1082",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "229",
                "FunctionName": "processLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processLogin",
                "FunctionPrototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2948498106",
              "PrototypeHash": "839857025",
              "FlawHash": "1148322114",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3713537122",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "processLogin",
            "IssueId": "1003",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "External Control of File Name or Path",
            "CWEId": "73",
            "VCId": "73.005",
            "DisplayText": "\u003cspan\u003eThis call to processLogin() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "230",
                "FunctionName": "processLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processLogin",
                "FunctionPrototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2948498106",
              "PrototypeHash": "839857025",
              "FlawHash": "2083412287",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1522093433",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1101",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "237",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "1042707444",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2885294553",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1095",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "249",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "239218340",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1086",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable formatString. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "255",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "239218340",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "showPasswordHint",
            "IssueId": "1004",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.002",
            "DisplayText": "\u003cspan\u003eThis call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "256",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "1126492424",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2590792712",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "showPasswordHint",
            "IssueId": "1005",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.002",
            "DisplayText": "\u003cspan\u003eThis call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "263",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "2083412287",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1522093433",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1084",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "385",
                "FunctionName": "processRegisterFinish",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegisterFinish",
                "FunctionPrototype": "java.lang.String processRegisterFinish(java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2611186185",
              "PrototypeHash": "992078440",
              "FlawHash": "3765405848",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "processRegisterFinish",
            "IssueId": "1006",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
            "CWEId": "601",
            "VCId": "601.002",
            "DisplayText": "\u003cspan\u003eThis call to processRegisterFinish() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/URL-Redirector-Abuse\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "411",
                "FunctionName": "processRegisterFinish",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegisterFinish",
                "FunctionPrototype": "java.lang.String processRegisterFinish(java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2611186185",
              "PrototypeHash": "992078440",
              "FlawHash": "3635512595",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "178736850",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.mail.Message.setSubject",
            "IssueId": "1110",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of CRLF Sequences (\u0027CRLF Injection\u0027)",
            "CWEId": "93",
            "VCId": "93.003",
            "DisplayText": "\u003cspan\u003eThis call to javax.mail.Message.setSubject() contains a CRLF injection flaw.  Writing untrusted input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eSanitize CRLF sequences from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/93.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/CRLF_Injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "433",
                "FunctionName": "emailUser",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.emailUser",
                "FunctionPrototype": "void emailUser(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "891548427",
              "PrototypeHash": "1902010057",
              "FlawHash": "1023264735",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "605199673",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1102",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "493",
                "FunctionName": "showProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showProfile",
                "FunctionPrototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2441819690",
              "PrototypeHash": "931230983",
              "FlawHash": "239218340",
              "FlawHashCount": "10",
              "FlawHashOrdinal": "7",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1087",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "504",
                "FunctionName": "showProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showProfile",
                "FunctionPrototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2441819690",
              "PrototypeHash": "931230983",
              "FlawHash": "239218340",
              "FlawHashCount": "10",
              "FlawHashOrdinal": "8",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.http.HttpServletResponse.addCookie",
            "IssueId": "1073",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of CRLF Sequences in HTTP Headers (\u0027HTTP Response Splitting\u0027)",
            "CWEId": "113",
            "VCId": "113.003",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variable cookie. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getCookies, and AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/113.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/HTTP_Response_Splitting\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/HTTP-Response-Splitting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "631",
                "FunctionName": "processProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processProfile",
                "FunctionPrototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "716311458",
              "PrototypeHash": "440064976",
              "FlawHash": "239218340",
              "FlawHashCount": "14",
              "FlawHashOrdinal": "11",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1083",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "658",
                "FunctionName": "processProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processProfile",
                "FunctionPrototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "716311458",
              "PrototypeHash": "440064976",
              "FlawHash": "1597415216",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1569903938",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.io.File.!operator_javanewinit",
            "IssueId": "1052",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "External Control of File Name or Path",
            "CWEId": "73",
            "VCId": "73.005",
            "DisplayText": "\u003cspan\u003eThis call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "660",
                "FunctionName": "processProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processProfile",
                "FunctionPrototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "716311458",
              "PrototypeHash": "440064976",
              "FlawHash": "3765405848",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1094",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "694",
                "FunctionName": "downloadImage",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.downloadImage",
                "FunctionPrototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2538574968",
              "PrototypeHash": "4136903839",
              "FlawHash": "1727548800",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1175540066",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.io.File.!operator_javanewinit",
            "IssueId": "1051",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "External Control of File Name or Path",
            "CWEId": "73",
            "VCId": "73.005",
            "DisplayText": "\u003cspan\u003eThis call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "699",
                "FunctionName": "downloadImage",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.downloadImage",
                "FunctionPrototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2538574968",
              "PrototypeHash": "4136903839",
              "FlawHash": "1480817290",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1081",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "708",
                "FunctionName": "downloadImage",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.downloadImage",
                "FunctionPrototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2538574968",
              "PrototypeHash": "4136903839",
              "FlawHash": "3402897421",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1018111559",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.ServletResponse.setContentType",
            "IssueId": "1067",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of CRLF Sequences in HTTP Headers (\u0027HTTP Response Splitting\u0027)",
            "CWEId": "113",
            "VCId": "113.003",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.ServletResponse.setContentType() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. \u003c/span\u003e \u003cspan\u003eEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/113.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/HTTP_Response_Splitting\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/HTTP-Response-Splitting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "711",
                "FunctionName": "downloadImage",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.downloadImage",
                "FunctionPrototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2538574968",
              "PrototypeHash": "4136903839",
              "FlawHash": "239218340",
              "FlawHashCount": "8",
              "FlawHashOrdinal": "6",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.http.HttpServletResponse.setHeader",
            "IssueId": "1075",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of CRLF Sequences in HTTP Headers (\u0027HTTP Response Splitting\u0027)",
            "CWEId": "113",
            "VCId": "113.003",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. \u003c/span\u003e \u003cspan\u003eEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/113.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/HTTP_Response_Splitting\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/HTTP-Response-Splitting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "713",
                "FunctionName": "downloadImage",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.downloadImage",
                "FunctionPrototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2538574968",
              "PrototypeHash": "4136903839",
              "FlawHash": "2546261748",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "231093339",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1089",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "803",
                "FunctionName": "usernameExists",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.usernameExists",
                "FunctionPrototype": "boolean usernameExists(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "387167963",
              "PrototypeHash": "2043108612",
              "FlawHash": "2150737360",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3558328982",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1088",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "859",
                "FunctionName": "updateUsername",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.updateUsername",
                "FunctionPrototype": "boolean updateUsername(java.lang.String, java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1328771198",
              "PrototypeHash": "124483070",
              "FlawHash": "2622985328",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "370152195",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.io.File.!operator_javanewinit",
            "IssueId": "1053",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "External Control of File Name or Path",
            "CWEId": "73",
            "VCId": "73.005",
            "DisplayText": "\u003cspan\u003eThis call to java.io.File.!operator_javanewinit() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Path-Traversal\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "863",
                "FunctionName": "updateUsername",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.updateUsername",
                "FunctionPrototype": "boolean updateUsername(java.lang.String, java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1328771198",
              "PrototypeHash": "124483070",
              "FlawHash": "2116923669",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3182486357",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.security.MessageDigest.getInstance",
            "IssueId": "1107",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "crypto",
            "IssueType": "Use of a Broken or Risky Cryptographic Algorithm",
            "CWEId": "327",
            "VCId": "327.001",
            "DisplayText": "\u003cspan\u003eThis function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. \u003c/span\u003e \u003cspan\u003eConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/327.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "961",
                "FunctionName": "md5",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.md5",
                "FunctionPrototype": "java.lang.String md5(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1253628993",
              "PrototypeHash": "143823320",
              "FlawHash": "1900691328",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1787533810",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1080",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "108",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "3857825604",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "4224621420",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.util.Random.nextBoolean",
            "IssueId": "1060",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "reliability",
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "127",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "3921711654",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "2",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1105",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "131",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "1813198480",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3306379537",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.util.Random.nextInt",
            "IssueId": "1062",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "reliability",
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "152",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "1167831715",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "468060104",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.util.Random.nextInt",
            "IssueId": "1063",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "reliability",
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "155",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "1008439999",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "533638490",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1100",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "158",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "4143238174",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2208788138",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.util.Random.nextInt",
            "IssueId": "1061",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "reliability",
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "178",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "537735606",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1057423377",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.util.Random.nextInt",
            "IssueId": "1065",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "reliability",
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "182",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "1167831715",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "468060104",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.util.Random.nextInt",
            "IssueId": "1064",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "reliability",
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "186",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "641328344",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2344997582",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.util.Random.nextInt",
            "IssueId": "1066",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "reliability",
            "IssueType": "Insufficient Entropy",
            "CWEId": "331",
            "VCId": "331.001",
            "DisplayText": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "190",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "1008439999",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "533638490",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1104",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "192",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "670840109",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2270899254",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1093",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "193",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "2700910824",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1435321974",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "getMoreFeed",
            "IssueId": "1000",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.002",
            "DisplayText": "\u003cspan\u003eThis call to getMoreFeed() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "204",
                "FunctionName": "getMoreFeed",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.getMoreFeed",
                "FunctionPrototype": "java.lang.String getMoreFeed(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "696653555",
              "PrototypeHash": "1785531231",
              "FlawHash": "3152419664",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1079",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable blabbersSql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "486",
                "FunctionName": "showBlabbers",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.showBlabbers",
                "FunctionPrototype": "java.lang.String showBlabbers(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1426715244",
              "PrototypeHash": "364381741",
              "FlawHash": "239218340",
              "FlawHashCount": "8",
              "FlawHashOrdinal": "6",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1078",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "558",
                "FunctionName": "processBlabbers",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.processBlabbers",
                "FunctionPrototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2992881595",
              "PrototypeHash": "3908588966",
              "FlawHash": "374234336",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1374926028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1092",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "559",
                "FunctionName": "processBlabbers",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.processBlabbers",
                "FunctionPrototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2992881595",
              "PrototypeHash": "3908588966",
              "FlawHash": "730021623",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1591528647",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.lang.Class.forName",
            "IssueId": "1076",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Use of Externally-Controlled Input to Select Classes or Code (\u0027Unsafe Reflection\u0027)",
            "CWEId": "470",
            "VCId": "470.002",
            "DisplayText": "\u003cspan\u003eThis call to java.lang.Class.forName() uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eValidate the class name against a combination of white and black lists to ensure that only expected behavior is produced.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/470.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Unsafe_Reflection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "571",
                "FunctionName": "processBlabbers",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.processBlabbers",
                "FunctionPrototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2992881595",
              "PrototypeHash": "3908588966",
              "FlawHash": "3960287134",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3631057737",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1103",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "39",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "239218340",
              "FlawHashCount": "6",
              "FlawHashOrdinal": "2",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1099",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "46",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "239218340",
              "FlawHashCount": "6",
              "FlawHashOrdinal": "3",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1077",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "50",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "239218340",
              "FlawHashCount": "6",
              "FlawHashOrdinal": "5",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1098",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/ListenCommand.java",
                "Line": "39",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.ListenCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.ListenCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1600354578",
              "PrototypeHash": "2344031398",
              "FlawHash": "239218340",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "2",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1091",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/ListenCommand.java",
                "Line": "46",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.ListenCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.ListenCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1600354578",
              "PrototypeHash": "2344031398",
              "FlawHash": "239218340",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "3",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1097",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/IgnoreCommand.java",
                "Line": "39",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.IgnoreCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.IgnoreCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "592522510",
              "PrototypeHash": "154563142",
              "FlawHash": "239218340",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "2",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "org.apache.log4j.Category.info",
            "IssueId": "1090",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Output Neutralization for Logs",
            "CWEId": "117",
            "VCId": "117.003",
            "DisplayText": "\u003cspan\u003eThis call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only write custom blacklisting code when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Log_injection\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Improper-Output-Handling\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/IgnoreCommand.java",
                "Line": "46",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.IgnoreCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.IgnoreCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "592522510",
              "PrototypeHash": "154563142",
              "FlawHash": "239218340",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "3",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1120",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable request.getParameter(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/tools.jsp",
                "Line": "65",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.tools_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.tools_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "600623311",
              "PrototypeHash": "710171868",
              "FlawHash": "1320905300",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3561334211",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.io.Writer.write",
            "IssueId": "1140",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable ping. The tainted data originated from an earlier call to java.lang.Process.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/tools.jsp",
                "Line": "68",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.tools_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.tools_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "600623311",
              "PrototypeHash": "710171868",
              "FlawHash": "239218340",
              "FlawHashCount": "5",
              "FlawHashOrdinal": "4",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1119",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/register.jsp",
                "Line": "87",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.register_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.register_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2955108852",
              "PrototypeHash": "3257347302",
              "FlawHash": "3765405848",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1123",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/register-finish.jsp",
                "Line": "83",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.register_002dfinish_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.register_002dfinish_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1964864860",
              "PrototypeHash": "234536343",
              "FlawHash": "3765405848",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1118",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/profile.jsp",
                "Line": "91",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4243473972",
              "PrototypeHash": "4040639354",
              "FlawHash": "3765405848",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "2",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1126",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/profile.jsp",
                "Line": "120",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4243473972",
              "PrototypeHash": "4040639354",
              "FlawHash": "3765405848",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "3",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1133",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/profile.jsp",
                "Line": "161",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4243473972",
              "PrototypeHash": "4040639354",
              "FlawHash": "2559643004",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "1",
              "CauseHash": "3228581583",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1137",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/profile.jsp",
                "Line": "164",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4243473972",
              "PrototypeHash": "4040639354",
              "FlawHash": "2559643004",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "2",
              "CauseHash": "3228581583",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1135",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable events.get(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/profile.jsp",
                "Line": "201",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.profile_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "4243473972",
              "PrototypeHash": "4040639354",
              "FlawHash": "701922364",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1589644387",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1122",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable target. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/login.jsp",
                "Line": "79",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.login_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.login_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1693152880",
              "PrototypeHash": "2944493309",
              "FlawHash": "3765405848",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "2",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1129",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/login.jsp",
                "Line": "86",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.login_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.login_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1693152880",
              "PrototypeHash": "2944493309",
              "FlawHash": "3765405848",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "3",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1128",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable currentUser. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/feed.jsp",
                "Line": "59",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1012115180",
              "PrototypeHash": "3138943393",
              "FlawHash": "3765405848",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "153293750",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1132",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/feed.jsp",
                "Line": "94",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1012115180",
              "PrototypeHash": "3138943393",
              "FlawHash": "1001489962",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "182372847",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1121",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/feed.jsp",
                "Line": "97",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1012115180",
              "PrototypeHash": "3138943393",
              "FlawHash": "2559643004",
              "FlawHashCount": "8",
              "FlawHashOrdinal": "1",
              "CauseHash": "3228581583",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1139",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/feed.jsp",
                "Line": "99",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1012115180",
              "PrototypeHash": "3138943393",
              "FlawHash": "1001489962",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "182372847",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1138",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/feed.jsp",
                "Line": "142",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.feed_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1012115180",
              "PrototypeHash": "3138943393",
              "FlawHash": "2559643004",
              "FlawHashCount": "8",
              "FlawHashOrdinal": "5",
              "CauseHash": "3228581583",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1117",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/blabbers.jsp",
                "Line": "101",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blabbers_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blabbers_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "228968244",
              "PrototypeHash": "2826894130",
              "FlawHash": "2559643004",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "1",
              "CauseHash": "3228581583",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1131",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/blabbers.jsp",
                "Line": "104",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blabbers_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blabbers_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "228968244",
              "PrototypeHash": "2826894130",
              "FlawHash": "2559643004",
              "FlawHashCount": "4",
              "FlawHashOrdinal": "2",
              "CauseHash": "3228581583",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1124",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/blab.jsp",
                "Line": "105",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blab_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blab_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "498999352",
              "PrototypeHash": "1580066649",
              "FlawHash": "1001489962",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "182372847",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1134",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/blab.jsp",
                "Line": "109",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blab_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blab_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "498999352",
              "PrototypeHash": "1580066649",
              "FlawHash": "2559643004",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "3228581583",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.jsp.JspWriter.print",
            "IssueId": "1130",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.027",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/blab.jsp",
                "Line": "111",
                "FunctionName": "_jspService",
                "QualifiedFunctionName": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blab_jsp._jspService",
                "FunctionPrototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.compiledjsp.xpreprocesswar.WEB_002dINF.views.blab_jsp"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "498999352",
              "PrototypeHash": "1580066649",
              "FlawHash": "1001489962",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "182372847",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.http.HttpServletResponse.addCookie",
            "IssueId": "1071",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "crypto",
            "IssueType": "Sensitive Cookie in HTTPS Session Without \u0027Secure\u0027 Attribute",
            "CWEId": "614",
            "VCId": "614.002",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. \u003c/span\u003e \u003cspan\u003eSet the Secure attribute for all cookies used by HTTPS sessions.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/614.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/utils/UserFactory.java",
                "Line": "96",
                "FunctionName": "updateInResponse",
                "QualifiedFunctionName": "com.veracode.verademo.utils.UserFactory.updateInResponse",
                "FunctionPrototype": "javax.servlet.http.HttpServletResponse updateInResponse(User, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.utils.UserFactory"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3762992136",
              "PrototypeHash": "3816343651",
              "FlawHash": "3905295364",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "3492435991",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1039",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "157",
                "FunctionName": "processLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processLogin",
                "FunctionPrototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2948498106",
              "PrototypeHash": "839857025",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.http.HttpServletResponse.addCookie",
            "IssueId": "1069",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "crypto",
            "IssueType": "Sensitive Cookie in HTTPS Session Without \u0027Secure\u0027 Attribute",
            "CWEId": "614",
            "VCId": "614.002",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. \u003c/span\u003e \u003cspan\u003eSet the Secure attribute for all cookies used by HTTPS sessions.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/614.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "173",
                "FunctionName": "processLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processLogin",
                "FunctionPrototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2948498106",
              "PrototypeHash": "839857025",
              "FlawHash": "873983214",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2017281430",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1044",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "246",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1041",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "312",
                "FunctionName": "processRegister",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegister",
                "FunctionPrototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2405517373",
              "PrototypeHash": "2646652268",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1043",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "368",
                "FunctionName": "processRegisterFinish",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegisterFinish",
                "FunctionPrototype": "java.lang.String processRegisterFinish(java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2611186185",
              "PrototypeHash": "992078440",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1046",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "470",
                "FunctionName": "showProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showProfile",
                "FunctionPrototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2441819690",
              "PrototypeHash": "931230983",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1040",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "573",
                "FunctionName": "processProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processProfile",
                "FunctionPrototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "716311458",
              "PrototypeHash": "440064976",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.http.HttpServletResponse.addCookie",
            "IssueId": "1070",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "crypto",
            "IssueType": "Sensitive Cookie in HTTPS Session Without \u0027Secure\u0027 Attribute",
            "CWEId": "614",
            "VCId": "614.002",
            "DisplayText": "\u003cspan\u003eThis call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. \u003c/span\u003e \u003cspan\u003eSet the Secure attribute for all cookies used by HTTPS sessions.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/614.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "631",
                "FunctionName": "processProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processProfile",
                "FunctionPrototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "716311458",
              "PrototypeHash": "440064976",
              "FlawHash": "239218340",
              "FlawHashCount": "14",
              "FlawHashOrdinal": "11",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.servlet.ServletResponse.setContentType",
            "IssueId": "1068",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "taint",
            "IssueType": "Information Exposure Through Sent Data",
            "CWEId": "201",
            "VCId": "201.009",
            "DisplayText": "\u003cspan\u003e The application calls the javax.servlet.ServletResponse.setContentType() function, which will result in data being transferred out of the application (via the network or another medium).  This data contains sensitive information.  \u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "711",
                "FunctionName": "downloadImage",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.downloadImage",
                "FunctionPrototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2538574968",
              "PrototypeHash": "4136903839",
              "FlawHash": "239218340",
              "FlawHashCount": "8",
              "FlawHashOrdinal": "6",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1048",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "769",
                "FunctionName": "usernameExists",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.usernameExists",
                "FunctionPrototype": "boolean usernameExists(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "387167963",
              "PrototypeHash": "2043108612",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1047",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "829",
                "FunctionName": "updateUsername",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.updateUsername",
                "FunctionPrototype": "boolean updateUsername(java.lang.String, java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1328771198",
              "PrototypeHash": "124483070",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.mail.Transport.send",
            "IssueId": "1116",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "taint",
            "IssueType": "Information Exposure Through an Error Message",
            "CWEId": "209",
            "VCId": "209.003",
            "DisplayText": "\u003cspan\u003e The application calls the javax.mail.Transport.send() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to send() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from earlier calls to java.lang.NullPointerException.getMessage, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace.\u003c/span\u003e \u003cspan\u003eEnsure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/209.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "949",
                "FunctionName": "emailExceptionsToAdmin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.emailExceptionsToAdmin",
                "FunctionPrototype": "void emailExceptionsToAdmin(java.lang.Throwable)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3767154927",
              "PrototypeHash": "4047066459",
              "FlawHash": "1728330308",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "javax.mail.Transport.send",
            "IssueId": "1115",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "taint",
            "IssueType": "Information Exposure Through Sent Data",
            "CWEId": "201",
            "VCId": "201.009",
            "DisplayText": "\u003cspan\u003e The application calls the javax.mail.Transport.send() function, which will result in data being transferred out of the application (via the network or another medium).  This data contains sensitive information.  The first argument to send() contains potentially sensitive data from the variable message. The potentially sensitive data originated from an earlier call to java.lang.System.getProperties.\u003c/span\u003e \u003cspan\u003eEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/201.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Information-Leakage\"\u003eWASC\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "949",
                "FunctionName": "emailExceptionsToAdmin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.emailExceptionsToAdmin",
                "FunctionPrototype": "void emailExceptionsToAdmin(java.lang.Throwable)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3767154927",
              "PrototypeHash": "4047066459",
              "FlawHash": "1728330308",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "2",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1037",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "100",
                "FunctionName": "processReset",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.processReset",
                "FunctionPrototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1451599134",
              "PrototypeHash": "540571682",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1038",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ResetController.java",
                "Line": "268",
                "FunctionName": "recreateDatabaseSchema",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ResetController.recreateDatabaseSchema",
                "FunctionPrototype": "void recreateDatabaseSchema()",
                "Scope": "com.veracode.verademo.controller.ResetController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3250738666",
              "PrototypeHash": "4146034803",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1036",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "69",
                "FunctionName": "showFeed",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.showFeed",
                "FunctionPrototype": "java.lang.String showFeed(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2674534213",
              "PrototypeHash": "1378603639",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1029",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "182",
                "FunctionName": "getMoreFeed",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.getMoreFeed",
                "FunctionPrototype": "java.lang.String getMoreFeed(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "696653555",
              "PrototypeHash": "1785531231",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1033",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "232",
                "FunctionName": "processFeed",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.processFeed",
                "FunctionPrototype": "java.lang.String processFeed(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1810659637",
              "PrototypeHash": "3979548286",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1034",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "307",
                "FunctionName": "showBlab",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.showBlab",
                "FunctionPrototype": "java.lang.String showBlab(java.lang.Integer, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3393835216",
              "PrototypeHash": "3184465425",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1031",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "400",
                "FunctionName": "processBlab",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.processBlab",
                "FunctionPrototype": "java.lang.String processBlab(java.lang.String, java.lang.Integer, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3103540323",
              "PrototypeHash": "112392555",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1035",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "483",
                "FunctionName": "showBlabbers",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.showBlabbers",
                "FunctionPrototype": "java.lang.String showBlabbers(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1426715244",
              "PrototypeHash": "364381741",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1032",
            "GOB": "B",
            "Severity": "2",
            "IssueTypeId": "reliability",
            "IssueType": "J2EE Bad Practices: Direct Management of Connections",
            "CWEId": "245",
            "VCId": "245.001",
            "DisplayText": "\u003cspan\u003eThis call to getConnection() fails to use the J2EE container\u0027s resource management facilities as required by the J2EE standard.\u003c/span\u003e \u003cspan\u003eRequest the connection from the container rather than attempting to access it directly.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/245.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "568",
                "FunctionName": "processBlabbers",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.processBlabbers",
                "FunctionPrototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2992881595",
              "PrototypeHash": "3908588966",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1023",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "166",
                "FunctionName": "processLogin",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processLogin",
                "FunctionPrototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2948498106",
              "PrototypeHash": "839857025",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1045",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "246",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Connection.createStatement",
            "IssueId": "1058",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "250",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "1480817290",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1025",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "251",
                "FunctionName": "showPasswordHint",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showPasswordHint",
                "FunctionPrototype": "java.lang.String showPasswordHint(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "14368270",
              "PrototypeHash": "649289062",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1042",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "312",
                "FunctionName": "processRegister",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegister",
                "FunctionPrototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2405517373",
              "PrototypeHash": "2646652268",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Connection.createStatement",
            "IssueId": "1057",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "315",
                "FunctionName": "processRegister",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegister",
                "FunctionPrototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2405517373",
              "PrototypeHash": "2646652268",
              "FlawHash": "1480817290",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1024",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "316",
                "FunctionName": "processRegister",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.processRegister",
                "FunctionPrototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2405517373",
              "PrototypeHash": "2646652268",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Connection.createStatement",
            "IssueId": "1059",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "494",
                "FunctionName": "showProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showProfile",
                "FunctionPrototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2441819690",
              "PrototypeHash": "931230983",
              "FlawHash": "1480817290",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "2",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1026",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable userHistoryResult, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/UserController.java",
                "Line": "495",
                "FunctionName": "showProfile",
                "QualifiedFunctionName": "com.veracode.verademo.controller.UserController.showProfile",
                "FunctionPrototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.UserController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2441819690",
              "PrototypeHash": "931230983",
              "FlawHash": "3392777041",
              "FlawHashCount": "3",
              "FlawHashOrdinal": "2",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.io.BufferedReader.!operator_javanewinit",
            "IssueId": "1050",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.!operator_javanewinit().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ToolsController.java",
                "Line": "64",
                "FunctionName": "ping",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ToolsController.ping",
                "FunctionPrototype": "java.lang.String ping(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.ToolsController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "3149804519",
              "PrototypeHash": "2923252499",
              "FlawHash": "1480817290",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.io.BufferedReader.!operator_javanewinit",
            "IssueId": "1049",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.!operator_javanewinit().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/ToolsController.java",
                "Line": "96",
                "FunctionName": "fortune",
                "QualifiedFunctionName": "com.veracode.verademo.controller.ToolsController.fortune",
                "FunctionPrototype": "java.lang.String fortune(java.lang.String)",
                "Scope": "com.veracode.verademo.controller.ToolsController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2161030689",
              "PrototypeHash": "3827778930",
              "FlawHash": "1480817290",
              "FlawHashCount": "2",
              "FlawHashOrdinal": "1",
              "CauseHash": "2866949028",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.DriverManager.getConnection",
            "IssueId": "1030",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/controller/BlabController.java",
                "Line": "182",
                "FunctionName": "getMoreFeed",
                "QualifiedFunctionName": "com.veracode.verademo.controller.BlabController.getMoreFeed",
                "FunctionPrototype": "java.lang.String getMoreFeed(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                "Scope": "com.veracode.verademo.controller.BlabController"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "696653555",
              "PrototypeHash": "1785531231",
              "FlawHash": "1934665430",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1046383670",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Connection.createStatement",
            "IssueId": "1056",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "38",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "1744979309",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2439302015",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1022",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                "Line": "40",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.RemoveAccountCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.RemoveAccountCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "2052213374",
              "PrototypeHash": "27480697",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Connection.createStatement",
            "IssueId": "1055",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/ListenCommand.java",
                "Line": "38",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.ListenCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.ListenCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1600354578",
              "PrototypeHash": "2344031398",
              "FlawHash": "1744979309",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2439302015",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1021",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/ListenCommand.java",
                "Line": "40",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.ListenCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.ListenCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1600354578",
              "PrototypeHash": "2344031398",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Connection.createStatement",
            "IssueId": "1054",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/IgnoreCommand.java",
                "Line": "38",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.IgnoreCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.IgnoreCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "592522510",
              "PrototypeHash": "154563142",
              "FlawHash": "1744979309",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2439302015",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "java.sql.Statement.executeQuery",
            "IssueId": "1020",
            "GOB": "B",
            "Severity": "0",
            "IssueTypeId": "reliability",
            "IssueType": "Improper Resource Shutdown or Release",
            "CWEId": "404",
            "VCId": "404.001",
            "DisplayText": "\u003cspan\u003eThe program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\u003c/span\u003e \u003cspan\u003eEnsure that all code paths properly release this resource.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/404.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "com/veracode/verademo/commands/IgnoreCommand.java",
                "Line": "40",
                "FunctionName": "execute",
                "QualifiedFunctionName": "com.veracode.verademo.commands.IgnoreCommand.execute",
                "FunctionPrototype": "void execute(java.lang.String)",
                "Scope": "com.veracode.verademo.commands.IgnoreCommand"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "592522510",
              "PrototypeHash": "154563142",
              "FlawHash": "3392777041",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "jQueryResult.attr",
            "IssueId": "1000",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.629",
            "DisplayText": "\u003cspan\u003eThis call to jQueryResult.attr() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/profile.jsp",
                "Line": "248",
                "FunctionName": "!func",
                "QualifiedFunctionName": "!main.!lambda1.!func.!lambda2.!func.!lambda3.!func",
                "FunctionPrototype": "!js_object !func(!js_object, !js_object, !js_object, ...)",
                "Scope": "^::!main::!lambda1::!func::!lambda2::!func::!lambda3"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1018100120",
              "PrototypeHash": "1295283715",
              "FlawHash": "3224440831",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2948331053",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "jQueryResult.append",
            "IssueId": "1002",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.629",
            "DisplayText": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/profile.jsp",
                "Line": "253",
                "FunctionName": "!func",
                "QualifiedFunctionName": "!main.!lambda1.!func.!lambda2.!func",
                "FunctionPrototype": "!js_object !func(!js_object, !js_object, ...)",
                "Scope": "^::!main::!lambda1::!func::!lambda2"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "329382962",
              "PrototypeHash": "3073349885",
              "FlawHash": "3103718343",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "2323626286",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          },
          {
            "Title": "jQueryResult.append",
            "IssueId": "1001",
            "GOB": "B",
            "Severity": "3",
            "IssueTypeId": "taint",
            "IssueType": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
            "CWEId": "80",
            "VCId": "80.058",
            "DisplayText": "\u003cspan\u003eThis call to jQueryResult.append() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/XSS\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://webappsec.pbworks.com/Cross-Site-Scripting\"\u003eWASC\u003c/a\u003e \u003ca href\u003d\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
            "Files": {
              "SourceFile": {
                "File": "WEB-INF/views/feed.jsp",
                "Line": "175",
                "FunctionName": "!func",
                "QualifiedFunctionName": "!main.getmore.!func.!lambda1.!func",
                "FunctionPrototype": "!js_object !func(!js_object, !js_object, ...)",
                "Scope": "^::!main::getmore::!func::!lambda1"
              }
            },
            "FlawMatch": {
              "ProcedureHash": "1182135740",
              "PrototypeHash": "683283032",
              "FlawHash": "3132762339",
              "FlawHashCount": "1",
              "FlawHashOrdinal": "1",
              "CauseHash": "1176028798",
              "CauseHashCount": "1",
              "CauseHashOrdinal": "1"
            }
          }
        ]
      }
    }
  },
  "pipeline_scan": "20.6.0-0"
}